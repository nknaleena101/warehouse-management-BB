package warehouse.controller;

import warehouse.model.DeliveryOrder;
import warehouse.model.OrderItem;
import warehouse.service.OrderService;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@WebServlet("/orders")
public class OrdersServlet extends HttpServlet {
    private OrderService orderService;

    @Override
    public void init() throws ServletException {
        super.init();
        this.orderService = new OrderService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            // Get available products for the dropdown
            List<Integer> availableProducts = orderService.getAvailableProducts();
            request.setAttribute("availableProducts", availableProducts);

            // Get recent orders for display
            List<DeliveryOrder> recentOrders = orderService.getRecentOrders(10);
            request.setAttribute("recentOrders", recentOrders);

            // Get orders for picking
            List<DeliveryOrder> ordersForPicking = orderService.getOrdersForPicking();
            request.setAttribute("ordersForPicking", ordersForPicking);

        } catch (SQLException e) {
            throw new ServletException("Error retrieving orders", e);
        }

        request.getRequestDispatcher("/jsp/orders.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            // Parse order details
            String destination = request.getParameter("destination");
            String orderDateStr = request.getParameter("orderDate");

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date orderDate = sdf.parse(orderDateStr);

            // Create order object
            DeliveryOrder order = new DeliveryOrder();
            order.setDestination(destination);
            order.setOrderDate(orderDate);
            order.setStatus("Created");

            // Parse order items
            List<OrderItem> items = new ArrayList<>();
            String[] productIds = request.getParameterValues("productId");
            String[] quantities = request.getParameterValues("quantity");

            for (int i = 0; i < productIds.length; i++) {
                OrderItem item = new OrderItem(
                        0, // itemId will be generated by DB
                        0, // orderId will be set after order creation
                        Integer.parseInt(productIds[i]),
                        Integer.parseInt(quantities[i]),
                        "Requested"
                );
                items.add(item);
            }

            // Create order in database
            int orderId = orderService.createOrder(order, items);

            // Redirect to prevent duplicate form submission
            response.sendRedirect(request.getContextPath() + "/orders?success=true");

        } catch (SQLException | ParseException e) {
            throw new ServletException("Error creating order", e);
        }
    }

    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int orderId = Integer.parseInt(request.getParameter("orderId"));
            List<OrderItem> items = orderService.getOrderItems(orderId);

            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");

            // Convert items to JSON
            StringBuilder json = new StringBuilder("[");
            for (OrderItem item : items) {
                json.append(String.format(
                        "{\"productId\":\"PROD-%d\",\"quantity\":%d,\"status\":\"%s\"},",
                        item.getProductId(), item.getQuantity(), item.getStatus()
                ));
            }
            if (items.size() > 0) {
                json.deleteCharAt(json.length() - 1); // Remove last comma
            }
            json.append("]");

            response.getWriter().write(json.toString());
        } catch (SQLException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"Error retrieving order items\"}");
        } catch (NumberFormatException e) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\":\"Invalid order ID\"}");
        }
    }
}

